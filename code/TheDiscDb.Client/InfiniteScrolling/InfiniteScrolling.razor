@using System.Threading
@using Microsoft.JSInterop
@typeparam T
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@namespace TheDiscDb.Components.InfiniteScrolling

@if (ItemTemplate != null)
{
    foreach (var item in _items)
    {
        @ItemTemplate(item)
    }
}
@if (_loading)
{
    @LoadingTemplate
}

<div @ref="_lastItemIndicator" style="height:1px"></div>

@code {
    private List<T> _items = new();
    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfiniteScrolling<T>>? _currentComponentReference;
    private IJSObjectReference? _module;
    private IJSObjectReference? _instance;
    private bool _loading = false;
    private CancellationTokenSource? _loadItemsCts;

    [Parameter]
    public InfiniteScrollingItemsProviderRequestDelegate<T>? ItemsProvider { get; set; }

    [Parameter]
    public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }

    public async Task Refresh()
    {
        _items.Clear();
        //_currentComponentReference = DotNetObjectReference.Create(this);
        //_instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        await LoadMoreItems();
    }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loading)
            return;

        if (ItemsProvider == null)
            return;

        _loading = true;
        try
        {
            _loadItemsCts ??= new CancellationTokenSource();

            StateHasChanged(); // Allow the UI to display the loading indicator
            try
            {
                var newItems = await ItemsProvider(new InfiniteScrollingItemsProviderRequest(_items.Count, _loadItemsCts.Token));
                _items.AddRange(newItems);
                var task = _instance?.InvokeVoidAsync("onNewItems");
                if (task != null && task.HasValue)
                {
                    await task.Value;
                }
            }
            catch (OperationCanceledException oce) when (_loadItemsCts == null || oce.CancellationToken == _loadItemsCts.Token)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
        }
        finally
        {
            _loading = false;
        }

        StateHasChanged(); // Display the new items and hide the loading indicator
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/infinite-scrolling.js");
            _currentComponentReference = DotNetObjectReference.Create(this);
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel the current load items operation
        if (_loadItemsCts != null)
        {
            _loadItemsCts.Dispose();
            _loadItemsCts = null;
        }

        // Stop the IntersectionObserver
        if (_instance != null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _currentComponentReference?.Dispose();
    }
}